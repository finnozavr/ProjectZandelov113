using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectZandelov
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Title = "Данил Занделов Проект"; // Меняем название консольного окна

            Console.WriteLine("Введите координаты начала линии (x1):");// Запрашиваем у пользователя координаты начала линии(x1)
            double x1 = Convert.ToDouble(Console.ReadLine());// Объявляем переменную и присваиваем ей значение, указанное пользователем
            Console.WriteLine("Введите координаты начала линии (y1):");// Запрашиваем у пользователя координаты начала линии(y1)
            double y1 = Convert.ToDouble(Console.ReadLine());// Объявляем переменную и присваиваем ей значение, указанное пользователем

            Console.WriteLine("Введите координаты конца линии (x2):");// Запрашиваем у пользователя координаты конца линии(x2)
            double x2 = Convert.ToDouble(Console.ReadLine());// Объявляем переменную и присваиваем ей значение, указанное пользователем
            Console.WriteLine("Введите координаты конца линии (y2):");// Запрашиваем у пользователя координаты конца линии(y2)
            double y2 = Convert.ToDouble(Console.ReadLine());// Объявляем переменную и присваиваем ей значение, указанное пользователем

            Console.Clear();// Очищаем консоль, для удобства видимости линии
            // Вычисление приращений
            double dx = x2 - x1;
            double dy = y2 - y1;
            double maxDelta = Math.Max(Math.Abs(dx), Math.Abs(dy));
            dx /= maxDelta;//Максимальное абсолютное значение которое используется для нормализации приращений, чтобы шаг по оси x был одинаковым относительно координаты y
            dy /= maxDelta;//Максимальное абсолютное значение которое используется для нормализации приращений, чтобы шаг по оси y был одинаковым относительно координаты x

            // Определение масштаба для корректного отображения на экране консоли
            double xScale = (Math.Max(x1, x2) > (Console.WindowWidth - 1)) ? Math.Max(x1, x2) / (Console.WindowWidth - 1)//Объявляем переменную которая будет хранить масштаб по оси x.
            //С помощью тернарного оператора "?" проверяем больше ли максимальная координата x ширины окна консоли
                : 1;//Если условие истинно, вычисляется масштаб, делением максимальной координаты X на ширину окна консоли минус 1. Это масштабирует координаты так, чтобы они помещались в ширину окна консоли.

            double yScale = (Math.Max(y1, y2) > (Console.WindowHeight - 1)) ? Math.Max(y1, y2) / (Console.WindowHeight - 1)//Объявляем переменную которая будет хранить масштаб по оси y.
            //С помощью тернарного оператора "?" проверяем больше ли максимальная координата x ширины окна консоли

                : 1;//Если условие истинно, вычисляется масштаб, делением максимальной координаты y на высоту окна консоли минус 1. Это масштабирует координаты так, чтобы они помещались в высоту окна консоли.

            double scale = Math.Max(xScale, yScale);// Объявляем переменную которая будет хранить окончательный масштаб, придаем ей макс. значение между переменными "xScale" и "yScale"

            double x = x1;//Объявляем переменную, которая инициализируется значением x1
            double y = y1;//Объявляем переменную, которая инициализируется значением y1
            int graphX = (int)Math.Round(x / scale);//Объявляем переменную, которая является округлением переменной "x" на "scale"
            int graphY = (int)Math.Round(y / scale);//Объявляем переменную, которая является округлением переменной "x" на "scale"

            while (graphX >= 0 && graphX < Console.WindowWidth && graphY >= 0 && graphY < Console.WindowHeight) //Создаем цикл "while" с условием, которое проверяет, чтоб координаты точки на экране консоли находились в пределах окна консоли
            {
                Console.SetCursorPosition(graphX, graphY);//Устанавливает позицию курсора в координатах "graphX" и "graphY"
                Console.Write('*');//Выводим символ * как точку линии
                x += dx;// Увеличение координаты x на соответствующие значения приращения "dx"
                y += dy;// Увеличение координаты y на соответствующие значения приращения "dy"
                graphX = (int)Math.Round(x / scale);// Пересчитываение координаты "graphX" для новой точки линии после увеличения x. Они округляются до целого значения 
                graphY = (int)Math.Round(y / scale);// Пересчитываение координаты "graphY" для новой точки линии после увеличения y. Они округляются до целого значения 
            }

            Console.ReadLine();
        }
    }
}
